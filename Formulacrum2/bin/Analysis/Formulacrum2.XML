<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Formulacrum2</name>
    </assembly>
    <members>
        <member name="T:Formulacrum.StringExt">
            <summary>
            Extension methods for internal convenience.
            </summary>
        </member>
        <member name="M:Formulacrum.StringExt.ToDelimitedString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Returns a string composed of each string of input collection, separated by a delimiter.
            </summary>
            <param name="strings">Input collection.</param>
            <param name="delimiter">Delimiter.</param>
            <returns>String composed of each string of input collection, separated by a delimiter.</returns>
        </member>
        <member name="T:Formulacrum.FunctionNode">
            <summary>
            Formula node representing a function.
            </summary>
        </member>
        <member name="M:Formulacrum.FunctionNode.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new function node with the given properties.
            </summary>
            <param name="identifier">Function name. (Will be used as <see cref="!:Name"/> 
            and <seealso cref="!:Identifier"/>.)</param>
            <param name="minArgs">Minimum number of arguments.</param>
            <param name="maxArgs">Maximum number of arguments.</param>
        </member>
        <member name="M:Formulacrum.FunctionNode.Clone">
            <summary>
            Returns a new node with identical properties to this instance, but with no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this instance, but with no child nodes assigned.</returns>		
        </member>
        <member name="T:Formulacrum.GroupNode">
            <summary>
            Formula node representing pair of grouping symbols.
            </summary>
        </member>
        <member name="M:Formulacrum.GroupNode.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new group node with the given properties.
            </summary>
            <param name="name">A user-fiendly name for the node.</param>
            <param name="openSymbol">Opening symbol.</param>
            <param name="closeSymbol">Closing symbol.</param>
            <remarks><see cref="!:Identifier"/> will be <paramref name="openSymbol"/>,
            followed by "...", followed by <paramref name="closeSymbol"/>. The "..." will not
            actually be rendered in formulas.
            <see cref="!:MinArgs"/> will be 1 and <see cref="!:MaxArgs"/> will be <see cref="!:ArgsLimit"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="openSymbol"/>
            or <paramref name="closeSymbol"/> are <c>null</c> or empty.</exception>
        </member>
        <member name="P:Formulacrum.GroupNode.Children">
            <summary>
            Collection of child nodes.
            </summary>
        </member>
        <member name="P:Formulacrum.GroupNode.OpenSymbol">
            <summary>
            Gets the opening symbol.
            </summary>
        </member>
        <member name="P:Formulacrum.GroupNode.CloseSymbol">
            <summary>
            Gets the closing symbol.
            </summary>
        </member>
        <member name="P:Formulacrum.GroupNode.IndentSymbol">
            <summary>
            Symbol to user for outline indenting. Defaults to (tab).
            </summary>
            <exception cref="!:System.ArugmentNullException">Value cannot be <c>null</c>.</exception>
        </member>
        <member name="P:Formulacrum.GroupNode.Item(System.Int32)">
            <summary>Gets or sets the child node at the given index.</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if <c>index</c> is negative or >= <c>Children.Count</c>.</exception>		
        </member>
        <member name="P:Formulacrum.GroupNode.Count">
            <summary>
            Gets the current number of child nodes (including <c>null</c>s).
            </summary>
        </member>
        <member name="P:Formulacrum.GroupNode.MinCount">
            <summary>
            Gets the minimum number of child nodes.
            </summary>
        </member>
        <member name="P:Formulacrum.GroupNode.MaxCount">
            <summary>
            Gets the maximum number of child nodes.
            </summary>
        </member>
        <member name="M:Formulacrum.GroupNode.Render(System.Boolean)">
            <summary>
            Renders node as a formula, using given outline setting.
            </summary>
            <param name="outline">If <c>true</c>, formula will be rendered as an outline,
            with each node on a new line and each child node indented past its parent.
            If <c>false</c>, formula is rendered with no line breaks or indentation.</param>
            <returns>Node rendered as formula.</returns>
            <remarks>This will recursively call Render on all child nodes, and their children, etc.
            Result will be <see cref="P:Formulacrum.GroupNode.OpenSymbol"/>, followed by a comma-separated list of 
            each child rendered, followed by <see cref="P:Formulacrum.GroupNode.CloseSymbol"/>.</remarks>
            <example>If <c>grp</c> is <c>new GroupNode("Paren", "(", ")").SetArgs(null, null)</c>,
            then <c>grp.Formula</c> returns <c>"(NULL,NULL)"</c>.
            </example>
        </member>
        <member name="M:Formulacrum.GroupNode.Clone">
            <summary>
            Returns a new node with identical properties to this instance, but with no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this instance, but with no child nodes assigned.</returns>
        </member>
        <member name="M:Formulacrum.GroupNode.SetCount(System.Int32)">
            <summary>
            If given count is between <c>MinCount</c> and <c>MaxCount</c>,
            clears all child nodes and sets child count to given value, 
            then returns this node.
            </summary>
            <param name="count">New child count.</param>
            <returns>Reference to this node.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if given count is
            negative or >= <c>Count</c>.</exception>
            <remarks>All elements will be <c>null</c> after calling this method.</remarks>
        </member>
        <member name="M:Formulacrum.GroupNode.SetValues(Formulacrum.Node[])">
            <summary>
            If number of given nodes is between <c>MinCount</c> and <c>MaxCount</c>,
            clears all elements, sets <c>Count</c> the number of given values,
            sets this all child nodes to the given nodes, and returns this node.
            </summary>
            <param name="values">Elements to assign.</param>
            <exception cref="T:System.ArgumentNullException">values</exception>
            <exception cref="T:System.ArgumentException">Thrown if number of values is not between
            <c>MinCount</c> and <c>MaxCount</c>.</exception>
            <returns>Reference to this node.</returns>
        </member>
        <member name="T:Formulacrum.BookNode">
            <summary>
            Formula node representing a workbook reference.
            </summary>
        </member>
        <member name="M:Formulacrum.BookNode.#ctor(System.String)">
            <summary>
            Creates a new book node with the given name.
            </summary>
            <param name="bookName">Workbook name.</param>
            <exception cref="T:System.ArgumentException"><c>!IsValidName(bookName)</c></exception>
        </member>
        <member name="M:Formulacrum.BookNode.IsValidName(System.String)">
            <summary>
            Determines if the given name is a valid workbook name.
            </summary>
            <param name="name">Name.</param>
            <returns><c>true</c>, if name is valid workbook name.</returns>
        </member>
        <member name="M:Formulacrum.BookNode.Clone">
            <summary>
            Returns a new node with identical properties to this node.
            </summary>
            <returns>New node with identical properties to this node.</returns>
        </member>
        <member name="T:Formulacrum.IntNode">
            <summary>
            Formula node representing an integer literal.
            </summary>
        </member>
        <member name="M:Formulacrum.IntNode.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new integer node with the given properties.
            </summary>
            <param name="value">Value.</param>
            <param name="format">Format string. 
            (Uses same notation as <see cref="M:System.String.Format(System.String,System.Object)"/>.)
            If <c>null</c>, the default string representation of <c>T</c> will be used.</param>
        </member>
        <member name="M:Formulacrum.IntNode.Clone">
            <summary>
            Returns a new node with identical properties to this node.
            </summary>
            <returns>New node with identical properties to this node.</returns>
        </member>
        <member name="T:Formulacrum.LiteralNode`1">
            <summary>
            Formula node representing a literal value.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
        </member>
        <member name="M:Formulacrum.LiteralNode`1.#ctor(`0,System.String)">
            <summary>
            Create a new literal node with the given value and format.
            </summary>
            <param name="value">Value.</param>
            <param name="format">Format string. 
            (Uses same notation as <see cref="M:System.String.Format(System.String,System.Object)"/>.)
            If <c>null</c>, the default string representation of <c>T</c> will be used.</param>
        </member>
        <member name="P:Formulacrum.LiteralNode`1.Value">
            <summary>
            Gets or sets the literal value.
            </summary>
        </member>
        <member name="P:Formulacrum.LiteralNode`1.Format">
            <summary>Gets or sets format string.</summary>
            <remarks> Uses same notation as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            If <c>null</c>, the default string representation of <c>T</c> will be used.</remarks>		
        </member>
        <member name="P:Formulacrum.LiteralNode`1.Children">
            <summary>
            Gets collection of child nodes.
            </summary>
            <remarks>For literal nodes, this will always return an empty collection.</remarks>
        </member>
        <member name="M:Formulacrum.LiteralNode`1.Render(System.Boolean)">
            <summary>
            Gets rendered formula.
            </summary>
            <remarks>Result will be <see cref="!:Identifier"/>.</remarks>
        </member>
        <member name="M:Formulacrum.LiteralNode`1.Clone">
            <summary>
            Returns a new node with indentical properties to this node.
            </summary>
            <returns>New node with identical properties to this node.</returns>
        </member>
        <member name="T:Formulacrum.SheetNode">
            <summary>
            Formula node representing a worksheet reference.
            </summary>
        </member>
        <member name="M:Formulacrum.SheetNode.#ctor(System.String)">
            <summary>
            Creates a new sheet node with the given sheet name.
            </summary>
            <param name="sheetName">Worksheet name.</param>
            <exception cref="T:System.ArgumentException"><c>!IsValidSheetName(sheetName)</c></exception>
        </member>
        <member name="M:Formulacrum.SheetNode.IsValidName(System.String)">
            <summary>
            Determines if a given name is a valid worksheet name.
            </summary>
            <param name="name">Name.</param>
            <returns><c>true</c>, if name is valid worksheet name.</returns>
        </member>
        <member name="M:Formulacrum.SheetNode.Clone">
            <summary>
            Returns a new node with identical properties to this node.
            </summary>
            <returns>New node with identical properties to this node.</returns>
        </member>
        <member name="T:Formulacrum.StringNode">
            <summary>
            Formula node representing a string literal.
            </summary>
        </member>
        <member name="M:Formulacrum.StringNode.#ctor(System.String,System.String)">
            <summary>
            Creates new string node with the given properties.
            </summary>
            <param name="value">Value.</param>
            <param name="format">Format string. 
            (Uses same notation as <see cref="M:System.String.Format(System.String,System.Object)"/>.)
            If <c>null</c>, value will be formatted with surrounding double quotes.</param>
        </member>
        <member name="M:Formulacrum.StringNode.Clone">
            <summary>
            Returns a new node with identical properties to this node.
            </summary>
            <returns>New node with identical properties to this node.</returns>
        </member>
        <member name="T:Formulacrum.Node">
            <summary>
            Base class for formula nodes.
            </summary>
        </member>
        <member name="M:Formulacrum.Node.#ctor(System.String)">
            <summary>
            Creates a new node with the given name.
            </summary>
            <param name="name">Node name.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="P:Formulacrum.Node.Name">
            <summary>
            Gets the node name.
            </summary>
        </member>
        <member name="P:Formulacrum.Node.Children">
            <summary>
            Gets the collection of child nodes.
            </summary>
        </member>
        <member name="M:Formulacrum.Node.Clone">
            <summary>
            Returns a new node with identical properties to this instance, but with no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this instance, but with no child nodes assigned.</returns>
        </member>
        <member name="M:Formulacrum.Node.Render(System.Boolean)">
            <summary>
            Renders node as a formula, using given outline setting.
            </summary>
            <param name="outline">If <c>true</c>, formula will be rendered as an outline,
            with each node on a new line and each child node indented past its parent.
            If <c>false</c>, formula is rendered with no line breaks or indentation.</param>
            <returns>Node rendered as formula.</returns>
            <remarks>This will recursively call Render on all child nodes, and their children, etc.</remarks>
        </member>
        <member name="M:Formulacrum.Node.ToString">
            <summary>
            Returns the rendered formula, without outline formatting.
            </summary>
            <returns>Node rendered as formula.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Formulacrum.Node.Render(Formulacrum.Node,System.Boolean)" -->
        <member name="T:Formulacrum.NodeList">
            <summary>
            Resizable collection of nodes.
            </summary>
        </member>
        <member name="F:Formulacrum.NodeList.CountLimit">
            <summary>The highest number of elements possible.</summary>		
        </member>
        <member name="M:Formulacrum.NodeList.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance, with the given size limits.
            </summary>
            <param name="minCount">Starting size, and smallest size collection can be resized to.</param>
            <param name="maxCount">Largest size collection can be resized to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw if <c>minCount</c> 
            is negative, <c>maxCount</c> is above <c>CountLimit</c>, or <c>maxCount</c> 
            is below <c>minCount</c>.</exception>
        </member>
        <member name="P:Formulacrum.NodeList.MinCount">
            <summary>
            Gets the smallest size the collection can be resized to.
            </summary>
        </member>
        <member name="P:Formulacrum.NodeList.MaxCount">
            <summary>
            Gets the largest size the collection can be resized to.
            </summary>
        </member>
        <member name="P:Formulacrum.NodeList.Count">
            <summary>
            Gets the current collection size.
            </summary>
        </member>
        <member name="P:Formulacrum.NodeList.Item(System.Int32)">
            <summary>
            Gets or sets the node at the given index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if 
            <c>index</c> is negative or >= <c>Count</c>.</exception>
        </member>
        <member name="M:Formulacrum.NodeList.GetEnumerator">
            <summary>
            Iterates through each node.
            </summary>
            <returns>Each node.</returns>
        </member>
        <member name="M:Formulacrum.NodeList.SetValues(Formulacrum.Node[])">
            <summary>
            If number of given nodes is between <c>MinCount</c> and <c>MaxCount</c>,
            clears all elements, resizes the collection to the number of given values,
            and sets this collection's elements to the given nodes.
            </summary>
            <param name="values">Elements to assign.</param>
            <exception cref="T:System.ArgumentNullException">values</exception>
            <exception cref="T:System.ArgumentException">Thrown if number of values is not between
            <c>MinCount</c> and <c>MaxCount</c>.</exception>
        </member>
        <member name="M:Formulacrum.NodeList.SetCount(System.Int32)">
            <summary>
            If given count is between <c>MinCount</c> and <c>MaxCount</c>,
            clears all elements and resizes collection to the given count.
            </summary>
            <param name="count">New collection size.</param>
            <exception cref="T:System.ArgumentException">Thrown if number of values is not between
            <c>MinCount</c> and <c>MaxCount</c>.</exception>
            <remarks>All elements will be <c>null</c> after calling this method.</remarks>
        </member>
        <member name="M:Formulacrum.NodeList.GetNode``1(System.Int32)">
            <summary>
            Returns the node at the given index, cast to the given node type.
            </summary>
            <param name="index">Node index.</param>
            <returns>Node at given index.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throw if <c>index</c>
            is negative or >= <c>Count</c>.</exception>
            <exception cref="T:System.InvalidCastException">Thrown if node at given
            index is not of the given type.</exception>
        </member>
        <member name="M:Formulacrum.NodeList.Render(System.Boolean)">
            <summary>
            Renders nodes as a formula, using given outline setting.
            </summary>
            <param name="outline">If <c>true</c>, formula will be rendered as an outline,
            with each node on a new line and each child node indented past its parent.
            If <c>false</c>, formula is rendered with no line breaks or indentation.
            Defaults to <c>false</c>.</param>
            <returns>Nodes rendered as formula.</returns>
            <remarks>This will recursively call Render on all child nodes, and their children, etc.</remarks>
        </member>
        <member name="M:Formulacrum.NodeList.ToString">
            <summary>
            Returns the rendered formula, without outline formatting.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Formulacrum.BinaryOperatorNode">
            <summary>
            Formula node representing an operator with two arguments.
            </summary>
        </member>
        <member name="M:Formulacrum.BinaryOperatorNode.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance with the given properties.
            </summary>
            <param name="name">Operator name.</param>
            <param name="symbol">Operator symbol.</param>
        </member>
        <member name="M:Formulacrum.BinaryOperatorNode.Render(System.Boolean)">
            <summary>
            Renders node as a formula, using given outline setting.
            </summary>
            <param name="outline">If <c>true</c>, formula will be rendered as an outline,
            with each node on a new line and each child node indented past its parent.
            If <c>false</c>, formula is rendered with no line breaks or indentation.
            Defaults to <c>false</c>.</param>
            <returns>Node rendered as formula.</returns>
            <remarks>This will recursively call Render on all child nodes, and their children, etc.</remarks>			
        </member>
        <member name="M:Formulacrum.BinaryOperatorNode.Clone">
            <summary>
            Returns a new node with identical properties to this instance, but with no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this instance, but with no child nodes assigned.</returns>		
        </member>
        <member name="M:Formulacrum.BinaryOperatorNode.SetArgs(Formulacrum.Node,Formulacrum.Node)">
            <summary>Sets the arguments to the given nodes, and returns this node.</summary>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns>Reference to this node.</returns>		
        </member>
        <member name="T:Formulacrum.OperatorNode">
            <summary>
            Base class for formula nodes representing operators.
            </summary>
        </member>
        <member name="P:Formulacrum.OperatorNode.Item(System.Int32)">
            <summary>
            Gets or sets the child node at the given index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if <c>index</c>
            is negative or >= number of arguments.</exception>
        </member>
        <member name="P:Formulacrum.OperatorNode.Symbol">
            <summary>
            Operator symbol.
            </summary>
        </member>
        <member name="P:Formulacrum.OperatorNode.Children">
            <summary>
            Gets collection of child nodes.
            </summary>
        </member>
        <member name="T:Formulacrum.UnaryOperatorNode">
            <summary>
            Formula node representing an operator with one argument.
            </summary>
        </member>
        <member name="M:Formulacrum.UnaryOperatorNode.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance with the given properties.
            </summary>
            <param name="name">Operator name.</param>
            <param name="symbol">Operator symbol.</param>
            <param name="isPrefix">Value indicating if symbol is rendered before (<c>true</c>)
            or after (<c>false</c>) argument.</param>
        </member>
        <member name="P:Formulacrum.UnaryOperatorNode.IsPrefix">
            <summary>
            Gets a value indicating if symbol is rendered before (<c>true</c>)
            or after (<c>false</c>) argument.
            </summary>
        </member>
        <member name="M:Formulacrum.UnaryOperatorNode.Render(System.Boolean)">
            <summary>
            Renders node as a formula, using given outline setting.
            </summary>
            <param name="outline">If <c>true</c>, formula will be rendered as an outline,
            with each node on a new line and each child node indented past its parent.
            If <c>false</c>, formula is rendered with no line breaks or indentation.
            Defaults to <c>false</c>.</param>
            <returns>Node rendered as formula.</returns>
            <remarks>This will recursively call Render on all child nodes, and their children, etc.</remarks>	
        </member>
        <member name="M:Formulacrum.UnaryOperatorNode.Clone">
            <summary>
            Returns a new node with identical properties to this instance, but with no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this instance, but with no child nodes assigned.</returns>
        </member>
        <member name="M:Formulacrum.UnaryOperatorNode.SetValues(Formulacrum.Node)">
            <summary>
            Sets argument to given value and returns this node.
            </summary>
            <param name="arg">Argument node.</param>
            <returns>Reference to this node.</returns>
        </member>
        <member name="T:Formulacrum.AbsoluteReferenceNode">
            <summary>
            Formula node representing a reference with absolute coordinates.
            </summary>
        </member>
        <member name="M:Formulacrum.AbsoluteReferenceNode.#ctor">
            <summary>
            Creates a new absolute reference node.
            </summary>
        </member>
        <member name="P:Formulacrum.AbsoluteReferenceNode.Top">
            <summary>
            Gets or sets the node for first row. (Args[0])
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Top</c> 
            must have number greater than 0 and lower than <c>Bottom</c>.</exception>
        </member>
        <member name="P:Formulacrum.AbsoluteReferenceNode.Left">
            <summary>
            Gets or sets the node for first column. (Args[1])
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Left</c> 
            must have number greater than 0 and lower than <c>Right</c>.</exception>
        </member>
        <member name="M:Formulacrum.AbsoluteReferenceNode.CoordinatesImpl(Formulacrum.IntNode,Formulacrum.IntNode,Formulacrum.IntNode,Formulacrum.IntNode)">
            <summary>
            Gets a string representing the given row and column coordinate nodes.
            </summary>
            <param name="top">The node representing the first row.</param>
            <param name="left">The node representing the first column.</param>
            <param name="bottom">The node representing the last row.</param>
            <param name="right">The node representing the last column.</param>
            <returns>String representing the given row and column coordinates.</returns>
        </member>
        <member name="M:Formulacrum.AbsoluteReferenceNode.ColumnNumberToLetters(System.Int32)">
            <summary>
            Returns the given number converted to column letters for absolute coordinates, 
            or empty string if given number is less than 1.
            </summary>
            <param name="n">Column number.</param>
            <returns>Column letters derived from <param name="n"/>.</returns>
            <example><c>ColumnNumberToLetters(0)</c> returns ""</example>
            <example><c>ColumnNumberToLetters(1)</c> returns "A"</example>
            <example><c>ColumnNumberToLetters(26)</c> returns "Z"</example>
            <example><c>ColumnNumberToLetters(27)</c> returns "AA"</example>
            <example><c>ColumnNumberToLetters(16384)</c> returns "XFD"</example>
        </member>
        <member name="M:Formulacrum.AbsoluteReferenceNode.Clone">
            <summary>
            Returns a new node with indentical properties to this node, but no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this node, but no child nodes assigned.</returns>
        </member>
        <member name="T:Formulacrum.ReferenceNode">
            <summary>
            Base class for formula nodes representing references.
            </summary>
            <remarks><see cref="!:Args"/> will always have 6 elements. See 
            <see cref="P:Formulacrum.ReferenceNode.Top"/>, <see cref="P:Formulacrum.ReferenceNode.Left"/>, <see cref="P:Formulacrum.ReferenceNode.Bottom"/>, <see cref="P:Formulacrum.ReferenceNode.Right"/>,
            <see cref="P:Formulacrum.ReferenceNode.SheetName"/>, and <see cref="P:Formulacrum.ReferenceNode.BookName"/>.</remarks>
        </member>
        <member name="M:Formulacrum.ReferenceNode.#ctor">
            <summary>
            Creates a new reference node.
            </summary>
        </member>
        <member name="P:Formulacrum.ReferenceNode.Top">
            <summary>
            Gets or sets the node for first row.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Top</c> 
            must have lower number than <c>Bottom</c>.</exception>
        </member>
        <member name="P:Formulacrum.ReferenceNode.Left">
            <summary>
            Gets or sets the node for first column.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Left</c> 
            must have lower number than <c>Right</c>.</exception>
        </member>
        <member name="P:Formulacrum.ReferenceNode.Bottom">
            <summary>
            Gets or sets the node for last row.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Bottom</c> 
            must have higher number than <c>Top</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><c>Bottom</c>
            can only be used if <c>Top</c> is already assigned.</exception>
        </member>
        <member name="P:Formulacrum.ReferenceNode.Right">
            <summary>
            Gets or sets the node for last column.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Right</c> 
            must have higher number than <c>Left</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><c>Right</c>
            can only be used if <c>Left</c> is already assigned.</exception>
        </member>
        <member name="P:Formulacrum.ReferenceNode.SheetName">
            <summary>
            Gets or sets the node for the worksheet.
            </summary>
        </member>
        <member name="P:Formulacrum.ReferenceNode.BookName">
            <summary>
            Gets or sets the node for the workbook.
            </summary>
        </member>
        <member name="P:Formulacrum.ReferenceNode.BookAndSheetPrefix">
            <summary>
            Gets a string representing the workbook and worksheet of this reference.
            </summary>
            <remarks>If <c>SheetName</c> is <c>null</c>, result will be empty string.
            If <c>BookName</c> is <c>null</c>, result will be in the form "'<c>SheetName.Value</c>'!";
            otherwise, result will be in the form "'[<c>BookName.Value</c>]<c>SheetName.Value</c>'!".
            </remarks>
        </member>
        <member name="P:Formulacrum.ReferenceNode.Coordinates">
            <summary>
            Gets a string representing the row and column coordinates of this reference.
            </summary>
        </member>
        <member name="M:Formulacrum.ReferenceNode.CoordinatesImpl(Formulacrum.IntNode,Formulacrum.IntNode,Formulacrum.IntNode,Formulacrum.IntNode)">
            <summary>
            Gets a string representing the given row and column coordinate nodes.
            </summary>
            <param name="top">The node representing the first row.</param>
            <param name="left">The node representing the first column.</param>
            <param name="bottom">The node representing the last row.</param>
            <param name="right">The node representing the last column.</param>
            <returns>String representing the given row and column coordinates.</returns>
        </member>
        <member name="M:Formulacrum.ReferenceNode.Render(System.Boolean)">
            <summary>
            Gets the rendered formula.
            </summary>
            <remarks>
            Result will be composed of <c>BookAndSheetPrefix</c>
            followed by <c>Coordinates</c>.</remarks>
            <param name="outline">Has no effect for reference nodes.</param>
            <returns>Rendered formula.</returns>
        </member>
        <member name="T:Formulacrum.RelativeReferenceNode">
            <summary>
            Formula node representing relative references.
            </summary>
        </member>
        <member name="M:Formulacrum.RelativeReferenceNode.CoordinatesImpl(Formulacrum.IntNode,Formulacrum.IntNode,Formulacrum.IntNode,Formulacrum.IntNode)">
            <summary>
            Gets a string representing the given row and column coordinate nodes.
            </summary>
            <param name="top">The node representing the first row.</param>
            <param name="left">The node representing the first column.</param>
            <param name="bottom">The node representing the last row.</param>
            <param name="right">The node representing the last column.</param>
            <returns>String representing the given row and column coordinates.</returns>
        </member>
        <member name="M:Formulacrum.RelativeReferenceNode.Clone">
            <summary>
            Returns a new node with indentical properties to this node, but no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this node, but no child nodes assigned.</returns>
        </member>
    </members>
</doc>
