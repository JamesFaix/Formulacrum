<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Formulacrum</name>
    </assembly>
    <members>
        <member name="T:Formulacrum.NodeExtensions">
            <summary>
            Extension methods for <c>Formulacrum.Nodes.Node</c>.
            </summary>
        </member>
        <member name="M:Formulacrum.NodeExtensions.Infix(Formulacrum.Nodes.Node,Formulacrum.Nodes.BinaryOperatorNode,Formulacrum.Nodes.Node)">
            <summary>
            Assigns the given arguments to the given operator, and returns the operator.
            </summary>
            <param name="arg1">The first argument.</param>
            <param name="op">The operator.</param>
            <param name="arg2">The second argument.</param>
            <returns><paramref name="op"/>.</returns>
            <remarks>This method allows binary operators to be used with infix notation 
            in source code.  This makes source code expressions more closely resemble rendered formulas.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="arg1"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Formulacrum.Nodes.CommonImplementation">
            <summary>
            Extension methods for internal convenience.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.CommonImplementation.ToDelimitedString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Returns a string composed of each string of input collection, separated by a delimiter.
            </summary>
            <param name="strings">Input collection.</param>
            <param name="delimiter">Delimiter.</param>
            <returns>String composed of each string of input collection, separated by a delimiter.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.NodeExt">
            <summary>
            Extension methods for Formulacrum.Node.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.NodeExt.Apply(Formulacrum.Nodes.Node,Formulacrum.Nodes.BinaryOperatorNode,Formulacrum.Nodes.Node)">
            <summary>
            Sets the arguments of the given binary operator to the given nodes,
            and returns the binary operator node.
            </summary>
            <param name="arg1">First operand.</param>
            <param name="op">Binary operator node.</param>
            <param name="arg2">Second operand.</param>
            <returns><paramref name="op"/>, with <paramref name="arg1"/> and <paramref name="arg2"/> assigned as arguments.</returns>
            <remarks>This method can be used for convenience to allow nodes for binary operators to be used
            in infix notation in source code, rather than the default prefix notation.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="op"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Formulacrum.Nodes.FunctionNode">
            <summary>
            Formula node representing a function.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.FunctionNode.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new function node with the given properties.
            </summary>
            <param name="name">Function name.</param>
            <param name="minArgs">Minimum number of arguments.</param>
            <param name="maxArgs">Maximum number of arguments.</param>
        </member>
        <member name="M:Formulacrum.Nodes.FunctionNode.Clone">
            <summary>
            Returns a new node with identical properties to this instance, but with no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this instance, but with no child nodes assigned.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.FunctionNode.SetValues(Formulacrum.Nodes.Node[])">
            <summary>
            Clears child nodes and sets child node collection to given nodes, then returns this node.
            </summary>
            <param name="values">Nodes to assign.</param>
            <returns>Reference to this node.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.FunctionNode.SetCount(System.Int32)">
            <summary>
            Clears child nodes and sets child node collection to give size, then returns this node.
            </summary>
            <param name="count">New size.</param>
            <returns>Reference to this node.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.GroupNode">
            <summary>
            Formula node representing pair of grouping symbols.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.GroupNode.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new group node with the given properties.
            </summary>
            <param name="name">A user-friendly name for the node.</param>
            <param name="openSymbol">Opening symbol.</param>
            <param name="closeSymbol">Closing symbol.</param>
            <remarks>
            <see cref="P:Formulacrum.Nodes.GroupNode.MinCount"/> will be 1 and <see cref="P:Formulacrum.Nodes.GroupNode.MaxCount"/> will be <see cref="F:Formulacrum.Nodes.NodeCollection.CountLimit"/>.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="openSymbol"/>
            or <paramref name="closeSymbol"/> are <c>null</c> or empty.</exception>
        </member>
        <member name="P:Formulacrum.Nodes.GroupNode.Children">
            <summary>
            Collection of child nodes.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.GroupNode.OpenSymbol">
            <summary>
            Gets the opening symbol.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.GroupNode.CloseSymbol">
            <summary>
            Gets the closing symbol.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.GroupNode.IndentSymbol">
            <summary>
            Symbol to user for outline indenting. Defaults to (tab).
            </summary>
            <exception cref="T:System.ArgumentNullException">Value cannot be <c>null</c>.</exception>
        </member>
        <member name="P:Formulacrum.Nodes.GroupNode.Item(System.Int32)">
            <summary>Gets or sets the child node at the given index.</summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if <c>index</c> is negative or >= <c>Children.Count</c>.</exception>
        </member>
        <member name="P:Formulacrum.Nodes.GroupNode.Count">
            <summary>
            Gets the current number of child nodes (including <c>null</c>s).
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.GroupNode.MinCount">
            <summary>
            Gets the minimum number of child nodes.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.GroupNode.MaxCount">
            <summary>
            Gets the maximum number of child nodes.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.GroupNode.Render(System.Boolean)">
            <summary>
            Renders node as a formula, using given outline setting.
            </summary>
            <param name="outline">If <c>true</c>, formula will be rendered as an outline,
            with each node on a new line and each child node indented past its parent.
            If <c>false</c>, formula is rendered with no line breaks or indentation.</param>
            <returns>Node rendered as formula.</returns>
            <remarks>This will recursively call Render on all child nodes, and their children, etc.
            Result will be <see cref="P:Formulacrum.Nodes.GroupNode.OpenSymbol"/>, followed by a comma-separated list of
            each child rendered, followed by <see cref="P:Formulacrum.Nodes.GroupNode.CloseSymbol"/>.</remarks>
            <example>If <c>grp</c> is <c>new GroupNode("Paren", "(", ")").SetArgs(null, null)</c>,
            then <c>grp.Formula</c> returns <c>"(NULL,NULL)"</c>.
            </example>
        </member>
        <member name="M:Formulacrum.Nodes.GroupNode.Clone">
            <summary>
            Returns a new node with identical properties to this instance, but with no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this instance, but with no child nodes assigned.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.GroupNode.SetCount(System.Int32)">
            <summary>
            If given count is between <c>MinCount</c> and <c>MaxCount</c>,
            clears all child nodes and sets child count to given value,
            then returns this node.
            </summary>
            <param name="count">New child count.</param>
            <returns>Reference to this node.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if given count is
            negative or >= <c>Count</c>.</exception>
            <remarks>All elements will be <c>null</c> after calling this method.</remarks>
        </member>
        <member name="M:Formulacrum.Nodes.GroupNode.SetValues(Formulacrum.Nodes.Node[])">
            <summary>
            If number of given nodes is between <c>MinCount</c> and <c>MaxCount</c>,
            clears all elements, sets <c>Count</c> the number of given values,
            sets this all child nodes to the given nodes, and returns this node.
            </summary>
            <param name="values">Elements to assign.</param>
            <exception cref="T:System.ArgumentNullException">values</exception>
            <exception cref="T:System.ArgumentException">Thrown if number of values is not between
            <c>MinCount</c> and <c>MaxCount</c>.</exception>
            <returns>Reference to this node.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.IFormula">
            <summary>
            Type that can be rendered as an Excel formula.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.IFormula.Render(System.Boolean)">
            <summary>
            Returns the instance rendered as an Excel formula.
            </summary>
            <param name="outline">If <c>true</c>, formula will be rendered as an outline,
            with each node on a new line and each child node indented past its parent.
            If <c>false</c>, formula is rendered with no line breaks or indentation.</param>
            <returns>Rendered formula.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.BookNode">
            <summary>
            Formula node representing a workbook reference.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.BookNode.#ctor(System.String)">
            <summary>
            Creates a new book node with the given name.
            </summary>
            <param name="bookName">Workbook name.</param>
            <exception cref="T:System.ArgumentException"><c>!IsValidName(bookName)</c></exception>
        </member>
        <member name="M:Formulacrum.Nodes.BookNode.IsValidName(System.String)">
            <summary>
            Determines if the given name is a valid workbook name.
            </summary>
            <param name="name">Name.</param>
            <returns><c>true</c>, if name is valid workbook name.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.BookNode.Clone">
            <summary>
            Returns a new node with identical properties to this node.
            </summary>
            <returns>New node with identical properties to this node.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.IntNode">
            <summary>
            Formula node representing an integer literal.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.IntNode.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new integer node with the given properties.
            </summary>
            <param name="value">Value.</param>
            <param name="format">Format string.
            (Uses same notation as <see cref="M:System.String.Format(System.String,System.Object)"/>.)
            If <c>null</c>, the default string representation of <c>T</c> will be used.</param>
        </member>
        <member name="M:Formulacrum.Nodes.IntNode.#ctor(System.Int32)">
            <summary>
            Creates a new integer node with the given properties.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Formulacrum.Nodes.IntNode.Clone">
            <summary>
            Returns a new node with identical properties to this node.
            </summary>
            <returns>New node with identical properties to this node.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.LiteralNode`1">
            <summary>
            Formula node representing a literal value.
            </summary>
            <typeparam name="T">Type of value.</typeparam>
        </member>
        <member name="M:Formulacrum.Nodes.LiteralNode`1.#ctor(`0,System.String)">
            <summary>
            Create a new literal node with the given value and format.
            </summary>
            <param name="value">Value.</param>
            <param name="format">Format string.
            (Uses same notation as <see cref="M:System.String.Format(System.String,System.Object)"/>.)
            If <c>null</c>, the default string representation of <c>T</c> will be used.</param>
        </member>
        <member name="M:Formulacrum.Nodes.LiteralNode`1.#ctor(`0)">
            <summary>
            Create a new literal node with the given value.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="P:Formulacrum.Nodes.LiteralNode`1.Value">
            <summary>
            Gets or sets the literal value.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.LiteralNode`1.Format">
            <summary>Gets or sets format string.</summary>
            <remarks> Uses same notation as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            If <c>null</c>, the default string representation of <c>T</c> will be used.</remarks>
        </member>
        <member name="P:Formulacrum.Nodes.LiteralNode`1.Children">
            <summary>
            Gets collection of child nodes.
            </summary>
            <remarks>For literal nodes, this will always return an empty collection.</remarks>
        </member>
        <member name="M:Formulacrum.Nodes.LiteralNode`1.Render(System.Boolean)">
            <summary>
            Gets rendered formula.
            </summary>
            <param name="outline">Has no effect on literal nodes.</param>
            <remarks>Result will be <see cref="P:Formulacrum.Nodes.LiteralNode`1.Value"/>.</remarks>
        </member>
        <member name="M:Formulacrum.Nodes.LiteralNode`1.Clone">
            <summary>
            Returns a new node with indentical properties to this node.
            </summary>
            <returns>New node with identical properties to this node.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.SheetNode">
            <summary>
            Formula node representing a worksheet reference.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.SheetNode.#ctor(System.String)">
            <summary>
            Creates a new sheet node with the given sheet name.
            </summary>
            <param name="sheetName">Worksheet name.</param>
            <exception cref="T:System.ArgumentException"><c>!IsValidSheetName(sheetName)</c></exception>
        </member>
        <member name="M:Formulacrum.Nodes.SheetNode.IsValidName(System.String)">
            <summary>
            Determines if a given name is a valid worksheet name.
            </summary>
            <param name="name">Name.</param>
            <returns><c>true</c>, if name is valid worksheet name.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.SheetNode.Clone">
            <summary>
            Returns a new node with identical properties to this node.
            </summary>
            <returns>New node with identical properties to this node.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.StringNode">
            <summary>
            Formula node representing a string literal.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.StringNode.#ctor(System.String,System.String)">
            <summary>
            Creates new string node with the given properties.
            </summary>
            <param name="value">Value.</param>
            <param name="format">Format string.
            (Uses same notation as <see cref="M:System.String.Format(System.String,System.Object)"/>.)
            If <c>null</c>, value will be formatted with surrounding double quotes.</param>
        </member>
        <member name="M:Formulacrum.Nodes.StringNode.#ctor(System.String)">
            <summary>
            Creates new string node with the given properties.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:Formulacrum.Nodes.StringNode.Clone">
            <summary>
            Returns a new node with identical properties to this node.
            </summary>
            <returns>New node with identical properties to this node.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.Node">
            <summary>
            Base class for formula nodes.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.Node.#ctor(System.String)">
            <summary>
            Creates a new node with the given name.
            </summary>
            <param name="name">Node name.</param>
            <exception cref="T:System.ArgumentNullException">name</exception>
        </member>
        <member name="P:Formulacrum.Nodes.Node.Name">
            <summary>
            Gets the node name.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.Node.Children">
            <summary>
            Gets the collection of child nodes.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.Node.Clone">
            <summary>
            Returns a new node with identical properties to this instance, but with no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this instance, but with no child nodes assigned.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.Node.Render(System.Boolean)">
            <summary>
            Renders node as a formula, using given outline setting.
            </summary>
            <param name="outline">If <c>true</c>, formula will be rendered as an outline,
            with each node on a new line and each child node indented past its parent.
            If <c>false</c>, formula is rendered with no line breaks or indentation.</param>
            <returns>Node rendered as formula.</returns>
            <remarks>This will recursively call Render on all child nodes, and their children, etc.</remarks>
        </member>
        <member name="M:Formulacrum.Nodes.Node.ToString">
            <summary>
            Returns the rendered formula, without outline formatting.
            </summary>
            <returns>Node rendered as formula.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.Node.Render(Formulacrum.Nodes.Node,System.Boolean)">
            <summary>
            Returns the rendered formula of the given node, or "NULL" if the node is <c>null</c>.
            </summary>
            <param name="node">Node to render.</param>
            <param name = "outline" > If <c> true </c>, formula will be rendered as an outline,
            with each node on a new line and each child node indented past its parent.
            If <c>false</c>, formula is rendered with no line breaks or indentation.</param>
            <returns>Rendered formula of given node, or "NULL".</returns>
        </member>
        <member name="T:Formulacrum.Nodes.NodeCollection">
            <summary>
            Resizable collection of nodes.
            </summary>
        </member>
        <member name="F:Formulacrum.Nodes.NodeCollection.CountLimit">
            <summary>The highest number of elements possible.</summary>
        </member>
        <member name="M:Formulacrum.Nodes.NodeCollection.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance, with the given size limits.
            </summary>
            <param name="minCount">Starting size, and smallest size collection can be resized to.</param>
            <param name="maxCount">Largest size collection can be resized to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw if <c>minCount</c>
            is negative, <c>maxCount</c> is above <c>CountLimit</c>, or <c>maxCount</c>
            is below <c>minCount</c>.</exception>
        </member>
        <member name="P:Formulacrum.Nodes.NodeCollection.MinCount">
            <summary>
            Gets the smallest size the collection can be resized to.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.NodeCollection.MaxCount">
            <summary>
            Gets the largest size the collection can be resized to.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.NodeCollection.Count">
            <summary>
            Gets the current collection size.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.NodeCollection.Item(System.Int32)">
            <summary>
            Gets or sets the node at the given index.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <c>index</c> is negative or >= <c>Count</c>.</exception>
        </member>
        <member name="M:Formulacrum.Nodes.NodeCollection.GetEnumerator">
            <summary>
            Iterates through each node.
            </summary>
            <returns>Each node.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.NodeCollection.SetValues(Formulacrum.Nodes.Node[])">
            <summary>
            If number of given nodes is between <c>MinCount</c> and <c>MaxCount</c>,
            clears all elements, resizes the collection to the number of given values,
            and sets this collection's elements to the given nodes.
            </summary>
            <param name="values">Elements to assign.</param>
            <exception cref="T:System.ArgumentNullException">values</exception>
            <exception cref="T:System.ArgumentException">Thrown if number of values is not between
            <c>MinCount</c> and <c>MaxCount</c>.</exception>
        </member>
        <member name="M:Formulacrum.Nodes.NodeCollection.SetCount(System.Int32)">
            <summary>
            If given count is between <c>MinCount</c> and <c>MaxCount</c>,
            clears all elements and resizes collection to the given count.
            </summary>
            <param name="count">New collection size.</param>
            <exception cref="T:System.ArgumentException">Thrown if number of values is not between
            <c>MinCount</c> and <c>MaxCount</c>.</exception>
            <remarks>All elements will be <c>null</c> after calling this method.</remarks>
        </member>
        <member name="M:Formulacrum.Nodes.NodeCollection.GetNode``1(System.Int32)">
            <summary>
            Returns the node at the given index, cast to the given node type.
            </summary>
            <param name="index">Node index.</param>
            <returns>Node at given index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throw if <c>index</c>
            is negative or >= <c>Count</c>.</exception>
            <exception cref="T:System.InvalidCastException">Thrown if node at given
            index is not of the given type.</exception>
        </member>
        <member name="M:Formulacrum.Nodes.NodeCollection.Render(System.Boolean)">
            <summary>
            Renders nodes as a formula, using given outline setting.
            </summary>
            <param name="outline">If <c>true</c>, formula will be rendered as an outline,
            with each node on a new line and each child node indented past its parent.
            If <c>false</c>, formula is rendered with no line breaks or indentation.</param>
            <returns>Nodes rendered as formula.</returns>
            <remarks>This will recursively call Render on all child nodes, and their children, etc.</remarks>
        </member>
        <member name="M:Formulacrum.Nodes.NodeCollection.ToString">
            <summary>
            Returns the rendered formula, without outline formatting.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Formulacrum.Nodes.BinaryOperatorNode">
            <summary>
            Formula node representing an operator with two arguments.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.BinaryOperatorNode.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance with the given properties.
            </summary>
            <param name="name">Operator name.</param>
            <param name="symbol">Operator symbol.</param>
        </member>
        <member name="M:Formulacrum.Nodes.BinaryOperatorNode.Render(System.Boolean)">
            <summary>
            Renders node as a formula, using given outline setting.
            </summary>
            <param name="outline">If <c>true</c>, formula will be rendered as an outline,
            with each node on a new line and each child node indented past its parent.
            If <c>false</c>, formula is rendered with no line breaks or indentation.
            Defaults to <c>false</c>.</param>
            <returns>Node rendered as formula.</returns>
            <remarks>This will recursively call Render on all child nodes, and their children, etc.</remarks>
        </member>
        <member name="M:Formulacrum.Nodes.BinaryOperatorNode.Clone">
            <summary>
            Returns a new node with identical properties to this instance, but with no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this instance, but with no child nodes assigned.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.BinaryOperatorNode.SetValues(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>Sets the arguments to the given nodes, and returns this node.</summary>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns>Reference to this node.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.OperatorNode">
            <summary>
            Base class for formula nodes representing operators.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.OperatorNode.Item(System.Int32)">
            <summary>
            Gets or sets the child node at the given index.
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if <c>index</c>
            is negative or >= number of arguments.</exception>
        </member>
        <member name="P:Formulacrum.Nodes.OperatorNode.Symbol">
            <summary>
            Operator symbol.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.OperatorNode.Children">
            <summary>
            Gets collection of child nodes.
            </summary>
        </member>
        <member name="T:Formulacrum.Nodes.UnaryOperatorNode">
            <summary>
            Formula node representing an operator with one argument.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.UnaryOperatorNode.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance with the given properties.
            </summary>
            <param name="name">Operator name.</param>
            <param name="symbol">Operator symbol.</param>
            <param name="isPrefix">Value indicating if symbol is rendered before (<c>true</c>)
            or after (<c>false</c>) argument.</param>
        </member>
        <member name="P:Formulacrum.Nodes.UnaryOperatorNode.IsPrefix">
            <summary>
            Gets a value indicating if symbol is rendered before (<c>true</c>)
            or after (<c>false</c>) argument.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.UnaryOperatorNode.Render(System.Boolean)">
            <summary>
            Renders node as a formula, using given outline setting.
            </summary>
            <param name="outline">If <c>true</c>, formula will be rendered as an outline,
            with each node on a new line and each child node indented past its parent.
            If <c>false</c>, formula is rendered with no line breaks or indentation.
            Defaults to <c>false</c>.</param>
            <returns>Node rendered as formula.</returns>
            <remarks>This will recursively call Render on all child nodes, and their children, etc.</remarks>
        </member>
        <member name="M:Formulacrum.Nodes.UnaryOperatorNode.Clone">
            <summary>
            Returns a new node with identical properties to this instance, but with no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this instance, but with no child nodes assigned.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.UnaryOperatorNode.SetValues(Formulacrum.Nodes.Node)">
            <summary>
            Sets argument to given value and returns this node.
            </summary>
            <param name="arg">Argument node.</param>
            <returns>Reference to this node.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.AbsoluteReferenceNode">
            <summary>
            Formula node representing a reference with absolute coordinates.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.AbsoluteReferenceNode.#ctor">
            <summary>
            Creates a new absolute reference node.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.AbsoluteReferenceNode.Top">
            <summary>
            Gets or sets the node for first row.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Top</c>
            must have number greater than 0 and lower than <c>Bottom</c>.</exception>
        </member>
        <member name="P:Formulacrum.Nodes.AbsoluteReferenceNode.Left">
            <summary>
            Gets or sets the node for first column.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Left</c>
            must have number greater than 0 and lower than <c>Right</c>.</exception>
        </member>
        <member name="M:Formulacrum.Nodes.AbsoluteReferenceNode.RenderCoordinates(Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode)">
            <summary>
            Gets a string representing the given row and column coordinate nodes.
            </summary>
            <param name="top">The node representing the first row.</param>
            <param name="left">The node representing the first column.</param>
            <param name="bottom">The node representing the last row.</param>
            <param name="right">The node representing the last column.</param>
            <returns>String representing the given row and column coordinates.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.AbsoluteReferenceNode.ColumnNumberToLetters(System.Int32)">
            <summary>
            Returns the given number converted to column letters for absolute coordinates,
            or empty string if given number is less than 1.
            </summary>
            <param name="columnNumber">Column number.</param>
            <returns>Column letters derived from <paramref name="columnNumber"/>.</returns>
            <example><c>ColumnNumberToLetters(0)</c> returns ""</example>
            <example><c>ColumnNumberToLetters(1)</c> returns "A"</example>
            <example><c>ColumnNumberToLetters(26)</c> returns "Z"</example>
            <example><c>ColumnNumberToLetters(27)</c> returns "AA"</example>
            <example><c>ColumnNumberToLetters(16384)</c> returns "XFD"</example>
        </member>
        <member name="M:Formulacrum.Nodes.AbsoluteReferenceNode.Clone">
            <summary>
            Returns a new node with indentical properties to this node, but no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this node, but no child nodes assigned.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.ReferenceNode">
            <summary>
            Base class for formula nodes representing references.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.ReferenceNode.#ctor">
            <summary>
            Creates a new reference node.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.ReferenceNode.Top">
            <summary>
            Gets or sets the node for first row.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Top</c>
            must have lower number than <c>Bottom</c>.</exception>
        </member>
        <member name="P:Formulacrum.Nodes.ReferenceNode.Left">
            <summary>
            Gets or sets the node for first column.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Left</c>
            must have lower number than <c>Right</c>.</exception>
        </member>
        <member name="P:Formulacrum.Nodes.ReferenceNode.Bottom">
            <summary>
            Gets or sets the node for last row.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Bottom</c>
            must have higher number than <c>Top</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><c>Bottom</c>
            can only be used if <c>Top</c> is already assigned.</exception>
        </member>
        <member name="P:Formulacrum.Nodes.ReferenceNode.Right">
            <summary>
            Gets or sets the node for last column.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><c>Right</c>
            must have higher number than <c>Left</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><c>Right</c>
            can only be used if <c>Left</c> is already assigned.</exception>
        </member>
        <member name="P:Formulacrum.Nodes.ReferenceNode.SheetName">
            <summary>
            Gets or sets the node for the worksheet.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.ReferenceNode.BookName">
            <summary>
            Gets or sets the node for the workbook.
            </summary>
        </member>
        <member name="P:Formulacrum.Nodes.ReferenceNode.Children">
            <summary>
            Gets collection of child nodes.
            </summary>
            <remarks>Order will be: BookName, SheetName, Top, Left, Bottom, Right.</remarks>
        </member>
        <member name="P:Formulacrum.Nodes.ReferenceNode.BookAndSheetPrefix">
            <summary>
            Gets a string representing the workbook and worksheet of this reference.
            </summary>
            <remarks>If <c>SheetName</c> is <c>null</c>, result will be empty string.
            If <c>BookName</c> is <c>null</c>, result will be in the form "'<c>SheetName.Value</c>'!";
            otherwise, result will be in the form "'[<c>BookName.Value</c>]<c>SheetName.Value</c>'!".
            </remarks>
        </member>
        <member name="P:Formulacrum.Nodes.ReferenceNode.Coordinates">
            <summary>
            Gets a string representing the row and column coordinates of this reference.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.ReferenceNode.RenderCoordinates(Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode)">
            <summary>
            Gets a string representing the given row and column coordinate nodes.
            </summary>
            <param name="top">The node representing the first row.</param>
            <param name="left">The node representing the first column.</param>
            <param name="bottom">The node representing the last row.</param>
            <param name="right">The node representing the last column.</param>
            <returns>String representing the given row and column coordinates.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.ReferenceNode.Render(System.Boolean)">
            <summary>
            Gets the rendered formula.
            </summary>
            <remarks>
            Result will be composed of <c>BookAndSheetPrefix</c>
            followed by <c>Coordinates</c>.</remarks>
            <param name="outline">Has no effect for reference nodes.</param>
            <returns>Rendered formula.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.ReferenceNode.SetCoordinates(Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode)">
            <summary>
            Sets the coordinate nodes of this instance to the given nodes, then returns this node.
            </summary>
            <param name="top">New top row node.</param>
            <param name="left">New left column node.</param>
            <param name="bottom">New bottom row node.</param>
            <param name="right">New right column node.</param>
            <returns>Reference to this node.</returns>
        </member>
        <member name="T:Formulacrum.Nodes.RelativeReferenceNode">
            <summary>
            Formula node representing relative references.
            </summary>
        </member>
        <member name="M:Formulacrum.Nodes.RelativeReferenceNode.RenderCoordinates(Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode)">
            <summary>
            Gets a string representing the given row and column coordinate nodes.
            </summary>
            <param name="top">The node representing the first row.</param>
            <param name="left">The node representing the first column.</param>
            <param name="bottom">The node representing the last row.</param>
            <param name="right">The node representing the last column.</param>
            <returns>String representing the given row and column coordinates.</returns>
        </member>
        <member name="M:Formulacrum.Nodes.RelativeReferenceNode.Clone">
            <summary>
            Returns a new node with indentical properties to this node, but no child nodes assigned.
            </summary>
            <returns>New node with identical properties to this node, but no child nodes assigned.</returns>
        </member>
        <member name="M:Formulacrum.CommonImplementation.Aggregate(System.String,Formulacrum.Nodes.Node[])">
            <summary>
            Returns a function node with the given name that can take between 1 and
            <see cref="F:Formulacrum.Nodes.NodeCollection.CountLimit"/> arguments, and assigns the
            given arguments starting at the first argument index.
            </summary>
            <param name="name">Name of function.</param>
            <param name="args">Arguments to assign. New node will always have room for 1 to
            <see cref="F:Formulacrum.Nodes.NodeCollection.CountLimit"/> arguments, regardless of how many are assigned.</param>
            <returns>New function node.</returns>
            <remarks>New node will always have room for 1 to 30 arguments, regardless
            of how many are assigned.</remarks>
        </member>
        <member name="T:Formulacrum.Common">
            <summary>
            Factory for general-purpose nodes.
            </summary>
        </member>
        <member name="M:Formulacrum.Common.Group">
            <summary>
            Returns a node for wrapping other nodes in parentheses.
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Common.Group(Formulacrum.Nodes.Node[])">
            <summary>
            Returns a node wrapping the given nodes in parentheses.
            </summary>
            <param name="nodes">Nodes to group.</param>
            <returns>New node</returns>
        </member>
        <member name="M:Formulacrum.Common.Array">
            <summary>
            Returns a node for wrapping other nodes in an array (with curly braces).
            </summary>
            <returns>New node</returns>
        </member>
        <member name="M:Formulacrum.Common.Array(Formulacrum.Nodes.Node[])">
            <summary>
            Returns a node wrapping the given nodes in an array (with curly braces).
            </summary>
            <param name="nodes">Nodes to group.</param>
            <returns>New node</returns>
        </member>
        <member name="M:Formulacrum.Common.Formula">
            <summary>
            Returns a node representing the formula operator (=).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Common.Formula(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the formula operator (=), with the given body.
            </summary>
            <param name="body">Formula body</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Common.Literal(System.String)">
            <summary>
            Returns a node representing a string literal.
            </summary>
            <param name="value">String literal.</param>
            <returns>New node</returns>
        </member>
        <member name="M:Formulacrum.Common.Literal(System.Int32)">
            <summary>
            Returns a node representing an integer literal.
            </summary>
            <param name="value">Integer literal.</param>
            <returns>New node</returns>
        </member>
        <member name="M:Formulacrum.Common.Literal(System.Decimal,System.String)">
            <summary>
            Returns a node representing a decimal literal.
            </summary>
            <param name="value">Decimal literal.</param>
            <param name="format">Format string.</param>
            <returns>New node</returns>
        </member>
        <member name="M:Formulacrum.Common.Literal(System.Double,System.String)">
            <summary>
            Returns a node representing a floating-point literal.
            </summary>
            <param name="value">Floating-point literal.</param>
            <param name="format">Format string.</param>
            <returns>New node</returns>
        </member>
        <member name="M:Formulacrum.Common.Literal(System.Boolean)">
            <summary>
            Returns a node representing a boolean literal.
            </summary>
            <param name="value">Boolean literal.</param>
            <returns>New node</returns>
        </member>
        <member name="T:Formulacrum.Logic">
            <summary>
            Factory for nodes representing logical functions and operators.
            </summary>
        </member>
        <member name="M:Formulacrum.Logic.EqualTo">
            <summary>
            Returns a node for equality comparison (=).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Logic.EqualTo(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node for equality comparison (=), with the given arguments.
            </summary>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Logic.NotEqual">
            <summary>
            Returns a node for inequality comparison (&lt;&gt;).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Logic.NotEqual(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node for inequality comparison (&lt;&gt;), with the given arguments.
            </summary>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Logic.LessThan">
            <summary>
            Returns a node for less-than comparison (&lt;).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Logic.LessThan(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node for less-than comparison (&lt;), with the given arguments.
            </summary>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Logic.LessOrEqual">
            <summary>
            Returns a node for less-than-or-equal-to comparison (&lt;=).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Logic.LessOrEqual(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node for less-than-or-equal-to comparison (&lt;=), with the given arguments.
            </summary>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Logic.GreaterThan">
            <summary>
            Returns a node for greater-than comparison (&gt;).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Logic.GreaterThan(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node for greater-than comparison (&gt;), with the given arguments.
            </summary>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Logic.GreaterOrEqual">
            <summary>
            Returns a node for greater-than-or-equal-to comparison (&gt;=).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Logic.GreaterOrEqual(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node for greater-than-or-equal-to comparison (&gt;=), with the given arguments.
            </summary>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Logic.IsBlank">
            <summary>
            Returns a node representing the <c>ISBLANK</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>ISBLANK</c> returns <c>TRUE</c> if the value is blank.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.IsBlank(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>ISBLANK</c> function, and assigns the given argument.
            </summary>
            <param name="value">Node representing value to be tested.</param>
            <returns>New node.</returns>
            <remarks><c>ISBLANK</c> returns <c>TRUE</c> if the value is blank.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.IsError">
            <summary>
            Returns a node representing the <c>ISERROR</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>ISERROR</c> returns <c>TRUE</c> if value is any error value.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.IsError(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>ISERROR</c> function, and assigns the given argument.
            </summary>
            <param name="value">Node representing value to be tested.</param>
            <returns>New node.</returns>
            <remarks><c>ISERROR</c> returns <c>TRUE</c> if value is any error value.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.Not">
            <summary>
            Returns a node representing the <c>NOT</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>NOT</c> reverses the logic of its argument.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.Not(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>NOT</c> function, and assigns the given argument.
            </summary>
            <param name="value">Node representing value to reverse.</param>
            <returns>New node.</returns>
            <remarks><c>NOT</c> reverses the logic of its argument.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.And(Formulacrum.Nodes.Node[])">
            <summary>
            Returns a node representing the <c>AND</c> function, with the given arguments.
            </summary>
            <param name="args">Arguments.</param>
            <returns>New node.</returns>
            <remarks><c>AND</c> returns <c>TRUE</c> if all of its arguments are <c>TRUE</c>.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.Or(Formulacrum.Nodes.Node[])">
            <summary>
            Returns a node representing the <c>OR</c> function, with the given arguments.
            </summary>
            <param name="args">Arguments.</param>
            <returns>New node.</returns>
            <remarks><c>OR</c> returns <c>TRUE</c> if any argument is <c>TRUE</c>.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.Xor(Formulacrum.Nodes.Node[])">
            <summary>
            Returns a node representing the <c>XOR</c> function, with the given arguments.
            </summary>
            <param name="args">Arguments.</param>
            <returns>New node.</returns>
            <remarks><c>XOR</c> returns a logical exclusive <c>OR</c> of all arguments.
            This function was introduced with Excel 2013.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.If">
            <summary>
            Returns a node representing the <c>IF</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>IF</c> specifies a logical test to perform.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.If(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>IF</c> function, with the given test and <c>TRUE</c> value;
            <c>FALSE</c> value is left unassigned.
            </summary>
            <param name="test">Node representing a logical test.</param>
            <param name="trueValue">Node representing result if test is <c>TRUE</c>.</param>
            <returns>New node.</returns>
            <remarks><c>IF</c> specifies a logical test to perform.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.If(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>IF</c> function, with the given test and <c>TRUE</c> value;
            <c>FALSE</c> value is left unassigned.
            </summary>
            <param name="test">Node representing a logical test.</param>
            <param name="trueValue">Node representing result if test is <c>TRUE</c>.</param>
            <param name="falseValue">Node representing result if test is <c>FALSE</c>.</param>
            <returns>New node.</returns>
            <remarks><c>IF</c> specifies a logical test to perform.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.IfError">
            <summary>
            Returns a node representing the <c>IFERROR</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>IFERROR</c> returns a value you specify if a formula evaluates to an error;
            otherwise, returns the result of the formula.</remarks>
        </member>
        <member name="M:Formulacrum.Logic.IfError(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>IFERROR</c> function, and assigns the given arguments.
            </summary>
            <param name="value">Expression that may result in error.</param>
            <param name="errorValue">Expression to return if <paramref name="value"/> results in an error.</param>
            <returns>New node.</returns>
            <remarks><c>IFERROR</c> returns a value you specify if a formula evaluates to an error;
            otherwise, returns the result of the formula.</remarks>
        </member>
        <member name="T:Formulacrum.Math">
            <summary>
            Factory for nodes representing math functions and operators.
            </summary>
        </member>
        <member name="M:Formulacrum.Math.Abs">
            <summary>
            Returns a node representing the <c>ABS</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>ABS</c> returns the absolute value of a number.</remarks>
        </member>
        <member name="M:Formulacrum.Math.Abs(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>ABS</c> function, and assigns the given argument.
            </summary>
            <param name="value">Node representing value.</param>
            <returns>New node.</returns>
            <remarks><c>ABS</c> returns the absolute value of a number.</remarks>
        </member>
        <member name="M:Formulacrum.Math.Ceiling">
            <summary>
            Returns a node representing the <c>CEILING</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>CEILING</c> rounds a number up, to the nearest integer
            or to the nearest multiple of significance.</remarks>
        </member>
        <member name="M:Formulacrum.Math.Ceiling(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>CEILING</c> function.
            </summary>
            <param name="number">Node representing number to round.</param>
            <param name="significance">Node representing multiple of significance.</param>
            <returns>New node.</returns>
            <remarks><c>CEILING</c> rounds a number up, to the nearest integer
            or to the nearest multiple of significance.</remarks>
        </member>
        <member name="M:Formulacrum.Math.Sum(Formulacrum.Nodes.Node[])">
            <summary>
            Returns a node representing the <c>SUM</c> function, and assigns the given arguments.
            </summary>
            <param name="args">Arguments.</param>
            <returns>New node.</returns>
            <remarks><c>SUM</c> returns the average of its arguments.</remarks>
        </member>
        <member name="M:Formulacrum.Math.Add">
            <summary>
            Returns a node for addition (+).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Math.Add(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing addition (+), with the given arguments.
            </summary>
            <returns>New node.</returns>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
        </member>
        <member name="M:Formulacrum.Math.Subtract">
            <summary>
            Returns a node representing subtraction (-).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Math.Subtract(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing subtraction (-), with the given arguments.
            </summary>
            <returns>New node.</returns>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
        </member>
        <member name="M:Formulacrum.Math.Multiply">
            <summary>
            Returns a node representing multiplication (*).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Math.Multiply(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing multiplication (*), with the given arguments.
            </summary>
            <returns>New node.</returns>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
        </member>
        <member name="M:Formulacrum.Math.Divide">
            <summary>
            Returns a node representing division (/).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Math.Divide(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing division (/), with the given arguments.
            </summary>
            <returns>New node.</returns>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
        </member>
        <member name="M:Formulacrum.Math.Exponent">
            <summary>
            Returns a node representing exponentiation (^).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Math.Exponent(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing exponentiation (^), with the given arguments.
            </summary>
            <returns>New node.</returns>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
        </member>
        <member name="M:Formulacrum.Math.Negate">
            <summary>
            Returns a node representing negation (-).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Math.Negate(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing negation (-), with the given argument.
            </summary>
            <returns>New node.</returns>
            <param name="arg">Argument.</param>
        </member>
        <member name="M:Formulacrum.Math.Percent">
            <summary>
            Returns a node representing percent (%).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.Math.Percent(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing percent (%), with the given argument.
            </summary>
            <returns>New node.</returns>
            <param name="arg">Argument.</param>
        </member>
        <member name="M:Formulacrum.Math.Average(Formulacrum.Nodes.Node[])">
            <summary>
            Returns a node representing the <c>AVERAGE</c> function, and assigns the given arguments.
            </summary>
            <param name="args">Arguments.</param>
            <returns>New node.</returns>
            <remarks><c>AVERAGE</c> returns the average of its arguments.</remarks>
        </member>
        <member name="M:Formulacrum.Math.Count(Formulacrum.Nodes.Node[])">
            <summary>
            Returns a node representing the <c>COUNT</c> function, and assigns the given arguments.
            </summary>
            <param name="args">Arguments.</param>
            <returns>New node.</returns>
            <remarks><c>COUNT</c> counts how many numbers are in the list of arguments.</remarks>
        </member>
        <member name="M:Formulacrum.Math.CountA(Formulacrum.Nodes.Node[])">
            <summary>
            Returns a node representing the <c>COUNTA</c> function, and assigns the given arguments.
            </summary>
            <param name="args">Arguments.</param>
            <returns>New node.</returns>
            <remarks><c>COUNTA</c> counts how many values are in the list of arguments.</remarks>
        </member>
        <member name="M:Formulacrum.Math.Max(Formulacrum.Nodes.Node[])">
            <summary>
            Returns a node representing the <c>MAX</c> function, and assigns the given arguments.
            </summary>
            <param name="args">Arguments.</param>
            <returns>New node.</returns>
            <remarks><c>MAX</c> returns the maximum value in a list of arguments.</remarks>
        </member>
        <member name="M:Formulacrum.Math.Min(Formulacrum.Nodes.Node[])">
            <summary>
            Returns a node representing the <c>MIN</c> function, and assigns the given arguments.
            </summary>
            <param name="args">Arguments.</param>
            <returns>New node.</returns>
            <remarks><c>MIN</c> returns the minimum value in a list of arguments.</remarks>
        </member>
        <member name="T:Formulacrum.TextFactory">
            <summary>
            Factory for nodes representing text functions and operators.
            </summary>
            <remarks>Name is longer than other factories to avoid ambiguity with <c>TEXT</c> function.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Char">
            <summary>
            Returns a node representing the <c>CHAR</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>CHAR</c> returns the character specified by the code number.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Char(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>CHAR</c> function, with the given argument.
            </summary>
            <param name="number">Node representing ASCII character code.</param>
            <returns>New node.</returns>
            <remarks><c>CHAR</c> returns the character specified by the code number.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Code">
            <summary>
            Returns a node representing the <c>CODE</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>CODE</c> returns a numeric code for the first character in a text string.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Code(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>CODE</c> function, with the given argument.
            </summary>
            <param name="text">Node representing text.</param>
            <returns>New node.</returns>
            <remarks><c>CODE</c> returns a numeric code for the first character in a text string.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Fixed">
            <summary>
            Returns a node representing the <c>FIXED</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>FIXED</c> formats a number as text with a fixed number of decimals.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Fixed(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>FIXED</c> function, and assigns the given argument.
            </summary>
            <param name="number">Node representing number to format.</param>
            <returns>New node.</returns>
            <remarks><c>FIXED</c> formats a number as text with a fixed number of decimals.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Fixed(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>FIXED</c> function, and assigns the given arguments.
            </summary>
            <param name="number">Node representing number to format.</param>
            <param name="decimals">Node representing number of decimal places.</param>
            <returns>New node.</returns>
            <remarks><c>FIXED</c> formats a number as text with a fixed number of decimals.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Fixed(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>FIXED</c> function, and assigns the give arguments.
            </summary>
            <param name="number">Node representing number to format.</param>
            <param name="decimals">Node representing number of decimal places.</param>
            <param name="noCommas">Node representing whether commas will be displayed or not.</param>
            <returns>New node.</returns>
            <remarks><c>FIXED</c> formats a number as text with a fixed number of decimals.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Text">
            <summary>
            Returns a node representing the <c>TEXT</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>TEXT</c> returns a numeric code for the first character in a text string.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Text(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>TEXT</c> function, and assigns the given arguments.
            </summary>
            <param name="value">Node representing value to convert to text.</param>
            <param name="format">Node representing format string.</param>
            <returns>New node.</returns>
            <remarks><c>TEXT</c> returns a numeric code for the first character in a text string.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Value">
            <summary>
            Returns a node representing the <c>VALUE</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>VALUE</c> converts a text argument to a number.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Value(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>VALUE</c> function, with the given argument.
            </summary>
            <param name="text">Node representing text.</param>
            <returns>New node.</returns>
            <remarks><c>VALUE</c> converts a text argument to a number.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Left">
            <summary>
            Returns a node representing the <c>LEFT</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>LEFT</c> returns the leftmost characters from a text value.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Left(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>LEFT</c> function, and assigns the given argument.
            </summary>
            <param name="text">Node representing text.</param>
            <returns>New node.</returns>
            <remarks><c>LEFT</c> returns the leftmost characters from a text value.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Left(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>LEFT</c> function, and assigns the given arguments.
            </summary>
            <param name="text">Node representing text.</param>
            <param name="length">Node representing number of characters to return.</param>
            <returns>New node.</returns>
            <remarks><c>LEFT</c> returns the leftmost characters from a text value.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Right">
            <summary>
            Returns a node representing the <c>RIGHT</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>RIGHT</c> returns the rightmost characters from a text value.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Right(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>RIGHT</c> function, and assigns the given argument.
            </summary>
            <param name="text">Node representing text.</param>
            <returns>New node.</returns>
            <remarks><c>RIGHT</c> returns the rightmost characters from a text value.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Right(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>RIGHT</c> function, and assigns the given arguments.
            </summary>
            <param name="text">Node representing text.</param>
            <param name="length">Node representing number of characters to return.</param>
            <returns>New node.</returns>
            <remarks><c>RIGHT</c> returns the rightmost characters from a text value.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Mid">
            <summary>
            Returns a node representing the <c>MID</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>MID</c> returns a specific number of characters from a
            text string starting at the position you specify.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Mid(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>MID</c> function, and assigns the given arguments.
            </summary>
            <param name="text">Node representing text.</param>
            <param name="start">Node representing index to start at.</param>
            <returns>New node.</returns>
            <remarks><c>MID</c> returns a specific number of characters from a
            text string starting at the position you specify.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Mid(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>MID</c> function, and assigns the given arguments.
            </summary>
            <param name="text">Node representing text.</param>
            <param name="start">Node representing index to start at.</param>
            <param name="length">Node representing number of characters to return.</param>
            <returns>New node.</returns>
            <remarks><c>MID</c> returns a specific number of characters from a
            text string starting at the position you specify.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Replace">
            <summary>
            Returns a node representing the <c>REPLACE</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>REPLACE</c> replaces characters within text.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Replace(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node,Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>REPLACE</c> function, and assigns the given arguments.
            </summary>
            <param name="oldText">Node representing text to modify.</param>
            <param name="start">Node representing index to start replacing at.</param>
            <param name="length">Node representing number of characters to replace.</param>
            <param name="newText">Node representing text to insert into <paramref name="oldText"/>.</param>
            <returns>New node.</returns>
            <remarks><c>REPLACE</c> replaces characters within text.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Substitute">
            <summary>
            Returns a node representing the <c>SUBSTITUTE</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>SUBSTITUTE</c> substitutes new text for old text in a text string.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Substitute(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>SUBSTITUTE</c> function, and assigns the given arguments.
            </summary>
            <param name="text">Node representing text to modify.</param>
            <param name="oldText">Node representing text to remove.</param>
            <param name="newText">Node representing text to insert.</param>
            <returns>New node.</returns>
            <remarks><c>SUBSTITUTE</c> substitutes new text for old text in a text string.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Substitute(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node,Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>SUBSTITUTE</c> function, and assigns the given arguments.
            </summary>
            <param name="text">Node representing text to modify.</param>
            <param name="oldText">Node representing text to remove.</param>
            <param name="newText">Node representing text to insert.</param>
            <param name="instance">Node representing number of instance of <paramref name="oldText"/> to replace.</param>
            <returns>New node.</returns>
            <remarks><c>SUBSTITUTE</c> substitutes new text for old text in a text string.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Lower">
            <summary>
            Returns a node representing the <c>LOWER</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>LOWER</c> converts text to lowercase.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Lower(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>LOWER</c> function, and assigns the given argument.
            </summary>
            <param name="text">Node representing text.</param>
            <returns>New node.</returns>
            <remarks><c>LOWER</c> converts text to lowercase.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Proper">
            <summary>
            Returns a node representing the <c>PROPER</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>PROPER</c> capitalizes the first letter in each word of a text value.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Proper(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>LOWER</c> function, and assigns the given argument.
            </summary>
            <param name="text">Node representing text.</param>
            <returns>New node.</returns>
            <remarks><c>PROPER</c> capitalizes the first letter in each word of a text value.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Upper">
            <summary>
            Returns a node representing the <c>UPPER</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>UPPER</c> converts text to uppercase.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Upper(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>UPPER</c> function, and assigns the given argument.
            </summary>
            <param name="text">Node representing text.</param>
            <returns>New node.</returns>
            <remarks><c>UPPER</c> converts text to uppercase.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Clean">
            <summary>
            Returns a node representing the <c>CLEAN</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>CLEAN</c> removes all non-printable characters from text.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Clean(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>CLEAN</c> function.
            </summary>
            <param name="text">Node representing text.</param>
            <returns>New node.</returns>
            <remarks><c>CLEAN</c> removes all non-printable characters from text.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Trim">
            <summary>
            Returns a node representing the <c>TRIM</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>TRIM</c> removes spaces from text.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Trim(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>TRIM</c> function, and assigns the given argument.
            </summary>
            <param name="text">Node representing text.</param>
            <returns>New node.</returns>
            <remarks><c>TRIM</c> removes spaces from text.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Concatenate(Formulacrum.Nodes.Node[])">
            <summary>
            Returns a node representing the <c>CONCATENATE</c> function, and assigns the given argument.
            </summary>
            <param name="args">Arguments.</param>
            <returns>New node.</returns>
            <remarks><c>CONCATENATE</c> joins several text items into one text item.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Rept">
            <summary>
            Returns a node representing the <c>REPT</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>REPT</c> repeats text a given number of times.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Rept(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>REPT</c> function, and assigns the given arguments.
            </summary>
            <param name="text">Node representing text.</param>
            <param name="times">Node representing number of times to repeat.</param>
            <returns>New node.</returns>
            <remarks><c>REPT</c> repeats text a given number of times.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Len">
            <summary>
            Returns a node representing the <c>LEN</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>LEN</c> returns the number of characters in a text string.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Len(Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>LEN</c> function, and assigns the given argument.
            </summary>
            <param name="text">Node representing text.</param>
            <returns>New node.</returns>
            <remarks><c>LEN</c> returns the number of characters in a text string.</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Find">
            <summary>
            Returns a node representing the <c>FIND</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>FIND</c> finds one text value within another (case-sensitive).</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Find(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>FIND</c> function, and assigns the given arguments.
            </summary>
            <param name="findText">Node representing text to find.</param>
            <param name="withinText">Node representing text to look in.</param>
            <returns>New node.</returns>
            <remarks><c>FIND</c> finds one text value within another (case-sensitive).</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Find(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>FIND</c> function, and assigns the given arguments.
            </summary>
            <param name="findText">Node representing text to find.</param>
            <param name="withinText">Node representing text to look in.</param>
            <param name="start">Node representing index to start at.</param>
            <returns>New node.</returns>
            <remarks><c>FIND</c> finds one text value within another (case-sensitive).</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Search">
            <summary>
            Returns a node representing the <c>SEARCH</c> function.
            </summary>
            <returns>New node.</returns>
            <remarks><c>SEARCH</c> finds one text value within another (not case-sensitive).</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Search(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing the <c>SEARCH</c> function.
            </summary>
            <param name="findText">Node representing text to look for.</param>
            <param name="withinText">Node representing text to look in.</param>
            <param name="start">Node representing index to start at.</param>
            <returns>New node.</returns>
            <remarks><c>SEARCH</c> finds one text value within another (not case-sensitive).</remarks>
        </member>
        <member name="M:Formulacrum.TextFactory.Concat">
            <summary>
            Returns a node representing concatenation (&amp;).
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.TextFactory.Concat(Formulacrum.Nodes.Node,Formulacrum.Nodes.Node)">
            <summary>
            Returns a node representing concatenation (&amp;), with the given arguments.
            </summary>
            <returns>New node.</returns>
            <param name="arg1">First argument.</param>
            <param name="arg2">Second argument.</param>
        </member>
        <member name="T:Formulacrum.AbsoluteRefs">
            <summary>
            Factory for nodes representing references, using absolute coordinates.
            </summary>
        </member>
        <member name="M:Formulacrum.AbsoluteRefs.Empty">
            <summary>
            Returns a node representing an absolute reference with unassigned coordinates.
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.AbsoluteRefs.Cell(Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode)">
            <summary>
            Returns a node representing an absolute reference with coordinates for the cell at the given row and column.
            </summary>
            <param name="row">Row number.</param>
            <param name="column">Column number.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.AbsoluteRefs.Row(Formulacrum.Nodes.IntNode)">
             <summary>
            Returns a node representing an absolute reference with coordinates for the row at the give index.
             </summary>
             <param name="index">Row number.</param>
             <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.AbsoluteRefs.Rows(Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode)">
            <summary>
            Returns a node representing an absolute reference with coordinates for the span of rows between the two given indexes.
            </summary>
            <param name="top">First row.</param>
            <param name="bottom">Last row.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.AbsoluteRefs.Column(Formulacrum.Nodes.IntNode)">
            <summary>
            Returns a node representing an absolute reference with coordinates for the column at the give index.
            </summary>
            <param name="index">Column number.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.AbsoluteRefs.Columns(Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode)">
            <summary>
            Returns a node representing an absolute reference with coordinates for the span of columns between the two given indexes.
            </summary>
            <param name="left">First column.</param>
            <param name="right">Last column.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.AbsoluteRefs.Range(Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode)">
            <summary>
            Returns a node representing an absolute reference with the given coordinates.
            </summary>
            <param name="top">First row.</param>
            <param name="left">First column.</param>
            <param name="bottom">Last row.</param>
            <param name="right">Last column.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.AbsoluteRefs.Book(System.String)">
            <summary>
            Returns a node representing a workbook reference.
            </summary>
            <param name="name">Workbook name.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.AbsoluteRefs.Sheet(System.String)">
            <summary>
            Returns a node representing a worksheet reference.
            </summary>
            <param name="name">Worksheet name.</param>
            <returns>New node.</returns>
        </member>
        <member name="T:Formulacrum.RelativeRefs">
            <summary>
            Factory for nodes representing references, using relative coordinates.
            </summary>
        </member>
        <member name="M:Formulacrum.RelativeRefs.Empty">
            <summary>
            Returns node representing a relative reference with unassigned coordinates.
            </summary>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.RelativeRefs.Cell(Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode)">
            <summary>
            Returns node representing a relative reference with coordinates for the cell at the given row and column.
            </summary>
            <param name="row">Row number.</param>
            <param name="column">Column number.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.RelativeRefs.Row(Formulacrum.Nodes.IntNode)">
            <summary>
            Returns node representing a relative reference with coordinates for the row at the give index.
            </summary>
            <param name="index">Row number.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.RelativeRefs.Rows(Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode)">
            <summary>
            Returns node representing a relative reference with coordinates for the span of rows between the two given indexes.
            </summary>
            <param name="top">First row.</param>
            <param name="bottom">Last row.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.RelativeRefs.Column(Formulacrum.Nodes.IntNode)">
            <summary>
            Returns node representing a relative reference with coordinates for the column at the give index.
            </summary>
            <param name="index">Column number.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.RelativeRefs.Columns(Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode)">
            <summary>
            Returns node representing a relative reference with coordinates for the span of columns between the two given indexes.
            </summary>
            <param name="left">First column.</param>
            <param name="right">Last column.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.RelativeRefs.Range(Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode,Formulacrum.Nodes.IntNode)">
            <summary>
            Returns node representing a relative reference with the given coordinates.
            </summary>
            <param name="top">First row.</param>
            <param name="left">First column.</param>
            <param name="bottom">Last row.</param>
            <param name="right">Last column.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.RelativeRefs.Book(System.String)">
            <summary>
            Returns a node representing a workbook reference.
            </summary>
            <param name="name">Workbook name.</param>
            <returns>New node.</returns>
        </member>
        <member name="M:Formulacrum.RelativeRefs.Sheet(System.String)">
            <summary>
            Returns a node representing a worksheet reference.
            </summary>
            <param name="name">Worksheet name.</param>
            <returns>New node.</returns>
        </member>
    </members>
</doc>
